{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  user: null,\n  loading: false,\n  error: false\n};\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    loginStart: state => {\n      state.loading = true;\n    },\n    loginSuccess: (state, action) => {\n      state.loading = false;\n      state.user = action.payload;\n    },\n    loginFailure: state => {\n      state.loading = false;\n      state.error = true;\n    },\n    logout: state => {\n      state.user = null;\n      state.loading = false;\n      state.error = false;\n    },\n    subscription: (state, action) => {\n      if (state.user.subscribedUsers.includes(action.payload)) {\n        state.user.subscribedUsers.splice(state.user.subscribedUsers.findIndex(channelId => channelId === action.payload), 1);\n      } else {\n        state.user.subscribedUsers.push(action.payload);\n      }\n    }\n  }\n});\nexport const {\n  loginStart,\n  loginSuccess,\n  loginFailure,\n  logout,\n  subscription\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","user","loading","error","userSlice","name","reducers","loginStart","state","loginSuccess","action","payload","loginFailure","logout","subscription","subscribedUsers","includes","splice","findIndex","channelId","push","actions","reducer"],"sources":["C:/dev/FS/YouTube-Clone/client/src/redux/userSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n  user: null,\r\n  loading: false,\r\n  error: false\r\n}\r\n\r\nexport const userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState,\r\n  reducers: {\r\n    loginStart: (state) => {\r\n      state.loading = true;\r\n    },\r\n    loginSuccess: (state, action) => {\r\n      state.loading = false;\r\n      state.user = action.payload;\r\n    },\r\n    loginFailure: (state) => {\r\n      state.loading = false;\r\n      state.error = true;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n      state.loading = false;\r\n      state.error = false;\r\n    },\r\n    subscription: (state, action) => {\r\n      if (state.user.subscribedUsers.includes(action.payload)) {\r\n        state.user.subscribedUsers.splice(\r\n          state.user.subscribedUsers.findIndex(\r\n            (channelId) => channelId === action.payload\r\n          ),\r\n          1\r\n        );\r\n      } else {\r\n        state.user.subscribedUsers.push(action.payload);\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { loginStart, loginSuccess, loginFailure, logout, subscription } =\r\n  userSlice.actions;\r\n\r\nexport default userSlice.reducer;"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,IADa;EAEnBC,OAAO,EAAE,KAFU;EAGnBC,KAAK,EAAE;AAHY,CAArB;AAMA,OAAO,MAAMC,SAAS,GAAGL,WAAW,CAAC;EACnCM,IAAI,EAAE,MAD6B;EAEnCL,YAFmC;EAGnCM,QAAQ,EAAE;IACRC,UAAU,EAAGC,KAAD,IAAW;MACrBA,KAAK,CAACN,OAAN,GAAgB,IAAhB;IACD,CAHO;IAIRO,YAAY,EAAE,CAACD,KAAD,EAAQE,MAAR,KAAmB;MAC/BF,KAAK,CAACN,OAAN,GAAgB,KAAhB;MACAM,KAAK,CAACP,IAAN,GAAaS,MAAM,CAACC,OAApB;IACD,CAPO;IAQRC,YAAY,EAAGJ,KAAD,IAAW;MACvBA,KAAK,CAACN,OAAN,GAAgB,KAAhB;MACAM,KAAK,CAACL,KAAN,GAAc,IAAd;IACD,CAXO;IAYRU,MAAM,EAAGL,KAAD,IAAW;MACjBA,KAAK,CAACP,IAAN,GAAa,IAAb;MACAO,KAAK,CAACN,OAAN,GAAgB,KAAhB;MACAM,KAAK,CAACL,KAAN,GAAc,KAAd;IACD,CAhBO;IAiBRW,YAAY,EAAE,CAACN,KAAD,EAAQE,MAAR,KAAmB;MAC/B,IAAIF,KAAK,CAACP,IAAN,CAAWc,eAAX,CAA2BC,QAA3B,CAAoCN,MAAM,CAACC,OAA3C,CAAJ,EAAyD;QACvDH,KAAK,CAACP,IAAN,CAAWc,eAAX,CAA2BE,MAA3B,CACET,KAAK,CAACP,IAAN,CAAWc,eAAX,CAA2BG,SAA3B,CACGC,SAAD,IAAeA,SAAS,KAAKT,MAAM,CAACC,OADtC,CADF,EAIE,CAJF;MAMD,CAPD,MAOO;QACLH,KAAK,CAACP,IAAN,CAAWc,eAAX,CAA2BK,IAA3B,CAAgCV,MAAM,CAACC,OAAvC;MACD;IACF;EA5BO;AAHyB,CAAD,CAA7B;AAmCP,OAAO,MAAM;EAAEJ,UAAF;EAAcE,YAAd;EAA4BG,YAA5B;EAA0CC,MAA1C;EAAkDC;AAAlD,IACXV,SAAS,CAACiB,OADL;AAGP,eAAejB,SAAS,CAACkB,OAAzB"},"metadata":{},"sourceType":"module"}